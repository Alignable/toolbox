#!/bin/bash
#
# Storing and fetching a Semaphore project's dependency cache files

VERSION=0.3

# Verbose output log
VERBOSE_LOG=1

# LFTP Errors
E_NOSFL='Access failed: No such file'

# Script errors
E_FLMSNG=0 # file missing
E_FLAE=0 # file already exists

# Misc
DATE_FORMAT='%H:%M %d/%m/%Y'

################################################################################
# Logs cache steps
# Globals:
#   VERBOSE_LOG
# Arguments:
#   None
# Returns:
#   None
################################################################################
cache::verbose() {
  VERBOSE_LOG=0
}

################################################################################
# Send the files identified by the key, to the cache repository using LFTP
# Globals:
#   SEMAPHORE_CACHE_KEY
#   SEMAPHORE_LOCAL_CACHE_PATH
# Arguments:
#   cache_key, path
# Returns:
#   None
################################################################################
cache::store() {
  local usage
  usage="Usage: \n\t cache store <key> <local-path>\nExample: \n\t cache store v1-bundle-1234 vendor/bundle"

  if [[ $# -eq 0 ]]; then
    cache::log "${usage}"
  elif [[ $# -ne 2 ]]; then
    cache::err "Incorrect number of arguments!"
  else
    SEMAPHORE_CACHE_KEY=$1
    SEMAPHORE_LOCAL_CACHE_PATHS=$2

    cache::lftp_put
  fi
}

################################################################################
# Wrapper around LFTP 'put'
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
################################################################################
cache::lftp_put() {
  for local_path in ${SEMAPHORE_LOCAL_CACHE_PATHS//,/ }; do
    if ! [[ -e $local_path ]]; then
      cache::log "'${local_path}' doesn't exist locally."

      continue
    fi

    if cache::file_is_present ${SEMAPHORE_CACHE_KEY}; then
      cache::log "Key '${SEMAPHORE_CACHE_KEY}' already exists."
    else
      tar czf /tmp/$SEMAPHORE_CACHE_KEY $local_path
      cache::log "Uploading '${local_path}' with cache key '${SEMAPHORE_CACHE_KEY}'..."
      cache::lftp "put -c /tmp/${SEMAPHORE_CACHE_KEY}"
      rm -rf /tmp/$SEMAPHORE_CACHE_KEY
      cache::log "Upload complete."
    fi

  done
}

################################################################################
# Download the files identified by the key to the path
# Globals:
#   SEMAPHORE_CACHE_KEY
# Arguments:
#   None
# Returns:
#   None
################################################################################
cache::restore() {
  local usage
  local semaphore_cache_keys

  usage="Usage: \n\t cache restore <comma-separated-keys>\nExample: \n\t cache restore bundle-develop-1234\nFallback example:\n\t cache restore bundle-develop-1234,bundle-develop,bundle-master"

  if [[ $# -eq 0 ]]; then
    cache::log "${usage}"
  elif [[ $# -ne 1 ]]; then
    cache::err "Incorrect number of arguments!"
  else
    semaphore_cache_keys=$1

    cache::download_keys /tmp/cache-keys

    for cache_key in ${semaphore_cache_keys//,/ }; do
      if cache::file_is_present $cache_key; then
        cache::log "HIT: ${cache_key}, using key ${cache_key}"
        cache::lftp_get $cache_key
        break
      else
        match=$(grep -m 1 $cache_key /tmp/cache-keys)

        if [[ ! -z "$match" ]]; then
          cache::log "HIT: ${cache_key}, using key ${match}"
          cache::lftp_get $match
          break
        else
          cache::log "MISS: ${cache_key}"
        fi
      fi
    done

    rm -f /tmp/cache-keys
  fi
}

################################################################################
# Deletes all files on cache server
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
################################################################################
cache::clear() {
  if cache::is_not_empty
  then
    cache::lftp "glob -a rm -r *"
  fi

  cache::log "Cache is empty."
}

################################################################################
# Lists all files on cache server
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
################################################################################
cache::list() {
  cache::lftp "cls --sort=date -l" "with_logs"
}

################################################################################
# Checks if a specified key is used in cache repository
# Globals:
#   None
# Arguments:
#   has_key
# Returns:
#   0 or 1
################################################################################
cache::has_key() {
  local KEY

  KEY=$1

  if cache::file_is_present ${KEY}
  then
    cache::log "Key ${KEY} exists in the cache store."

    return 0
  else
    cache::log "Key ${KEY} doesn't exist in the cache store."

    return 1
  fi
}

cache::download_keys() {
  local command
  local output
  local file
  command="cls --sort=date"
  file=$1

  output=$(echo -e "${command}" | lftp -u $SEMAPHORE_CACHE_USERNAME, sftp://$SEMAPHORE_CACHE_URL 2>&1)

  echo -e "$output" > $file
}

################################################################################
# Wrapper around LFTP 'get'
# Globals:
#   SEMAPHORE_CACHE_KEY_MD5
#   E_FLMSNG
# Arguments:
#   None
# Returns:
#   None
################################################################################
cache::lftp_get() {
  local key

  key=$1
  E_FLMSNG=0 # set global env var to zero before running file_is_present

  if cache::file_is_present $key; then
    cd /tmp
    cache::lftp "get1 -c $key"
    cd - &>/dev/null
    restored_path=$(tar -ztvf /tmp/$key | head -1 | awk '{print $6}')
    tar xzf /tmp/$key -C .
    rm -rf /tmp/$key
    cache::log "Restored: ${restored_path}"
  else
    cache::log "Key '$key' does not exist in the cache store."
  fi
}

################################################################################
# Wrapper around LFTP
# Globals:
#   E_FLMSNG
#   E_NOSFL
#   W_FLAEX
#   SEMAPHORE_CACHE_URL
#   SEMAPHORE_CACHE_USERNAME
# Arguments:
#   command
#   log - when set to "with_logs" it prints command output log
# Returns:
#   None
################################################################################
cache::lftp() {
  local lftp_command
  local print_log
  local command_log
  local command_status

  lftp_command=$1
  print_log=${2:-false}

  if [[ -z $lftp_command ]]; then
    cache::err "LFTP command can't be empty!"
  fi

  command_log=$(echo -e "${lftp_command}" | lftp -u $SEMAPHORE_CACHE_USERNAME, sftp://$SEMAPHORE_CACHE_URL 2>&1)
  command_status=$?

  if [[ "${print_log}" == "with_logs" ]] && [ -n "$command_log" ]; then
    cache::log "$command_log"
  fi

  # is_not_empty
  if [[ "${lftp_command}" == 'cls -l' ]]; then
    [ "$command_log" ] && return 0 || return 1
  fi

  if [[ "${lftp_command}" == 'cls --sort=date -l' ]] && [ -z "$command_log" ]; then
    echo "Cache is empty."
  fi

  # has_key and file_is_present
  if [[ "${command_log}" =~ "${E_NOSFL}" ]] && [[ "${lftp_command}" =~ 'cls' ]]; then
    E_FLMSNG=1

    return
  fi

  # Ignore the error when creating a directory which is already present
  if [[ "${command_log}" =~ 'File already exists' ]] && [[ "${lftp_command}" =~ 'mkdir' ]]; then
    W_FLAEX=1

    return
  fi

 # ignoring these lines in the output log until the debugging option is introduced
 #  if [[ $command_status -ne 0 ]]; then
 #    cache::log "Log:\n---\n${command_log}\n---\n"
 #    cache::err "Error while executing LFTP command '$lftp_command'"
 #   fi
}

################################################################################
# Calculates the md5 sum for the cache key (string, file)
# Globals:
#   SEMAPHORE_CACHE_KEY
#   SEMAPHORE_CACHE_KEY_MD5
# Arguments:
#   command
# Returns:
#   None
################################################################################

cache::calculate_key_md5() {
  if [[ -f $SEMAPHORE_CACHE_KEY ]]; then
    cache::log "Cache key is a file. Calculating md5 hash..."
    SEMAPHORE_CACHE_KEY_MD5=$(md5sum ${SEMAPHORE_CACHE_KEY})
  else
    cache::log "Cache key is a string. Calculating md5 hash..."
    SEMAPHORE_CACHE_KEY_MD5=$(echo ${SEMAPHORE_CACHE_KEY} | md5sum)
  fi


  if [[ $? -ne 0 ]]; then
    cache::err "Failed to generate md5 sum for the provided key. (${SEMAPHORE_CACHE_KEY})"
  else
    SEMAPHORE_CACHE_KEY_MD5=$(echo $SEMAPHORE_CACHE_KEY_MD5 | cut -d' ' -f1)

    cache::log "md5 hash: ${SEMAPHORE_CACHE_KEY_MD5}"
  fi
}


################################################################################
# Prints the program usage
# Globals:
#   VERSION
#   SEMAPHORE_CACHE_USERNAME
#   SEMAPHORE_CACHE_URL
# Arguments:
#   None
# Returns:
#   None
################################################################################
cache::print_usage() {
  echo -e "\n#####################################################################################################"
  echo -e "cache ${VERSION} | Utility for saving and fetching dependency caches"
  echo -e "\ncache [store|restore|list|clear|has_key] opts"
  echo -e "#####################################################################################################"
}


################################################################################
# Cheks the presence of the SSH key which is used to access the cache storage
# Globals:
#   SSH_PRIVATE_KEY_PATH
# Arguments:
#   none
# Returns:
#   none
################################################################################
cache::check_ssh_key() {
  if ! [[ -e $SSH_PRIVATE_KEY_PATH ]]; then
    cache::err "Private SSH key missing! (${SSH_PRIVATE_KEY_PATH})"
  fi
}

################################################################################
# Loads the private SSH key into the agent
# Globals:
#   SSH_PRIVATE_KEY_PATH
# Arguments:
#   none
# Returns:
#   none
################################################################################
cache::load_ssh_key() {
  local ssh_agent_error_log

  if [[ $VERBOSE_LOG == 0 ]]; then
    cache::log "Loading SSH key into the agent"
  fi

  ssh_agent_log=$(eval $(ssh-agent) 2>&1 && ssh-add <(cat ${SSH_PRIVATE_KEY_PATH}) 2>&1)

  if ! [[ $? = 0 ]]; then
    cache::err "Error while configuring the SSH agent!\nLog: ${ssh_agent_log}"
  fi
}


################################################################################
# Checks if 'lftp' is available
# Globals:
#   none
# Arguments:
#   none
# Returns:
#   none
################################################################################
cache::check_lftp() {
  if [[ $VERBOSE_LOG == 0 ]]; then
    cache::log "Checking if LFPT is present"
  fi

  if which lftp &> /dev/null; then
    return 0;
  else
    cache::err "The 'lftp' executable is missing or not in the \$PATH"
  fi
}


################################################################################
# Checks if the required environment variables are set
# Globals:
#   SEMAPHORE_CACHE_URL
#   SEMAPHORE_CACHE_USERNAME
#   SSH_PRIVATE_KEY_PATH
# Arguments:
#   none
# Returns:
#   none
################################################################################
cache::check_env() {
  if [[ $VERBOSE_LOG == 0 ]]; then
    cache::log "Checking environment variables"
  fi

  if [[ -z $SEMAPHORE_CACHE_URL ]]; then
    cache::err "'SEMAPHORE_CACHE_URL' environment variable not set!"
  fi

  if [[ -z $SEMAPHORE_CACHE_USERNAME ]]; then
    cache::err "'SEMAPHORE_CACHE_USERNAME' environment variable not set!"
  fi

  if [[ -z $SSH_PRIVATE_KEY_PATH ]]; then
    cache::err "'SSH_PRIVATE_KEY_PATH' environment variable not set!"
  fi
}


################################################################################
# Helper function to check if file is present on cache directory
# Globals:
#   E_FLMSNG
# Arguments:
#   key (file name)
# Returns:
#   true or false
################################################################################
cache::file_is_present() {
  local KEY

  KEY=$1
  if [[ $VERBOSE_LOG == 0 ]]; then
    cache::log "Checking if key $KEY is present in cache store."
  fi

  cache::lftp "cls ${KEY}"

  if [[ "$E_FLMSNG" == "1" ]]; then
    false
  elif [[ "$E_FLMSNG" == "0" ]]; then
    true
  fi
}


################################################################################
# Helper function to check if file is present on cache directory
# Globals:
#   E_FLMSNG
# Arguments:
#   key (file name)
# Returns:
#   0 or 1
################################################################################
cache::is_not_empty() {
  cache::lftp "cls -l"
  return $?
}

################################################################################
# Helper function to show error messages and to terminate execution on error
# Globals:
#   DATE_FORMAT
# Arguments:
#   message
# Returns:
#   1
################################################################################
cache::err() {
  echo -e "\n! [$(date +"${DATE_FORMAT}")]: $@\n" >&2
}


################################################################################
# Helper function to show log messages
# Globals:
#   DATE_FORMAT
# Arguments:
#   message
# Returns:
#   none
################################################################################
cache::log() {
  if [[ $VERBOSE_LOG == 0 ]]; then
    echo -e "[$(date +"${DATE_FORMAT}")]: $@" >&2
  else
    echo -e "$@" >&2
  fi
}

################################################################################
# The main entrypoint to the script. It initiates the store or restore actions.
# Globals:
#   none
# Arguments:
#   'restore', 'store'
# Returns:
#   none
################################################################################
cache::main() {
  cache::check_lftp
  cache::check_ssh_key
  cache::load_ssh_key
  cache::check_env

  case "$1" in
    "restore" )
      shift

      cache::restore "$@"
      ;;
    "store" )
      shift

      cache::store "$@"
      ;;
    "clear" )
      shift

      cache::clear "$@"
      ;;
    "list" )
      shift

      cache::list "$@"
      ;;
    "is_not_empty" )
      shift

      cache::is_not_empty "$@"
      ;;
    "has_key" )
      shift

      cache::has_key "$@"
      ;;
    * )
      cache::print_usage
      ;;
  esac
}

cache::main "$@"
